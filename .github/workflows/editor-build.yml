name: Editor Builder

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'textie'

jobs:
  build:
    runs-on: windows-2022

    env:
      SolutionPath: "textie/TextieEditor.sln"
      Platform: x64
      Configuration: Release
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: "textie/textie/TextieEditor.csproj"
      ProjectDirectory: "./textie/textie/textie"
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: "textie/textie/textie"

    steps:
      - name: Install gdown
        run: pip install gdown

      - name: Download and Extract Repository
        run: |
          gdown https://drive.google.com/uc?id=1a7WTTHKwpmci8rhIO9JQxT_SsV429Fs4 -O repo.zip
          Expand-Archive -Path repo.zip -DestinationPath .
          Move-Item -Path "testie/*" -Destination "." -Force
          Remove-Item -Recurse -Force "duckstation-uwp"
        shell: pwsh
        
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Install Windows SDK
        run: |
          choco install windows-sdk-10-version-1903-all -y
          choco install windows-sdk-10-version-2004-all -y
        shell: pwsh

      - name: Install NuGet
        run: |
          choco install nuget.commandline -y
        shell: pwsh

      - name: Restore NuGet Packages
        run: |
          nuget restore $env:SolutionPath
        shell: pwsh

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: |
          echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV

      - name: App Build
        run: |
          msbuild `
            "$env:SolutionPath" `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}" `
            /p:RestorePackagesConfig=true
        shell: pwsh

      - name: Clean the Package (continued)
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
